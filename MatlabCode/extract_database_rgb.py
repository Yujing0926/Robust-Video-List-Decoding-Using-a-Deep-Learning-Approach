import osimport reimport sysimport csvimport shutilimport numpy as npimport pandas as pdsystem_type = 'Windows'if system_type == 'Windows':    APPEND_CHAR = '\\' # Windows systemelif system_type == 'Linux':    APPEND_CHAR = '/'  # Linux systemelif system_type == 'Mac':    APPEND_CHAR = '/'  # Mac systemfunction = 'train'error_frame = 1  # choose error frameQP = 'qp37'  # choose QPcodec = 'HEVC'  # define the codecrf_frame = 'rgb'patch_size = 128image_width = 1920image_height = 1024img_ori_w = 1920img_ori_h = 1024generate_score = Truemain_route = 'E:\\doctor\\codes\\CNN_Classification_Candidates' # change to your own pathmain_candidate_route = main_routeif function == 'train':    intact_route = main_candidate_route + APPEND_CHAR + '1080p_videos'    original_video_route = main_candidate_route + APPEND_CHAR + '1080p_rawSequence'    damage_rate = ['0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '0.99']    # videonames_route = main_route + APPEND_CHAR + 'videonames.csv'    # df = pd.read_csv(videonames_route, encoding='utf-8')    # video_name = df['33videos']    # video_name = video_name.values.tolist()    # video_name= [s for s in video_name if str(s) != 'nan']    # print(len(video_name))    if error_frame == 1:        candidate_video_route = main_candidate_route + APPEND_CHAR + 'Candidates_1024p_train_intra'        database_route = main_route + APPEND_CHAR + '1024p_database_patchs' + str(patch_size) + '_train_intra' + APPEND_CHAR        if not (os.path.exists(database_route)):            os.mkdir(database_route);    else:        candidate_video_route = main_candidate_route + APPEND_CHAR + 'Candidates_1024p_train_inter'        database_route = main_route + APPEND_CHAR + '1024p_database_patchs' + str(patch_size) + '_train_inter' + APPEND_CHAR        if not (os.path.exists(database_route)):            os.mkdir(database_route);elif function == 'test':    intact_route = main_candidate_route + APPEND_CHAR + '1080p_videos_' + function    original_video_route = main_candidate_route + APPEND_CHAR + '1080p_rawSequence_' + function    damage_rate = ['0.3', '0.6', '0.9']    videonames_route = main_route + APPEND_CHAR + 'videonames.csv'    df = pd.read_csv(videonames_route, encoding='utf-8')    video_name = df['57videos']    video_name = video_name.values.tolist()    video_name = [s for s in video_name if str(s) != 'nan']    print(len(video_name))    if error_frame == 1:        candidate_video_route = main_candidate_route + APPEND_CHAR + 'Candidates_1024p_test_intra'        database_route = main_route + APPEND_CHAR + '1024p_database_patchs' + str(patch_size) + '_test_intra' + APPEND_CHAR        if not (os.path.exists(database_route)):            os.mkdir(database_route);    else:        candidate_video_route = main_candidate_route + APPEND_CHAR + 'Candidates_1024p_test_inter'        database_route = main_route + APPEND_CHAR + '1024p_database_patchs' + str(patch_size) + '_test_inter' + APPEND_CHAR        if not (os.path.exists(database_route)):            os.mkdir(database_route);list_data = os.listdir(candidate_video_route)video_name = [s for s in list_data]ref_id = list()ref_frames = list()all_frames = list()psnr_error_frame = list()ssim_error_frame = list()std = list()intact_frames = list()intact_psnr_error_frame = list()intact_ssim_error_frame = list()candidate_frames = list()candidate_psnr_error_frame = list()candidate_ssim_error_frame = list()all_patchs = list()psnr_error_patch = list()ssim_error_patch = list()for vn in range(0, len(video_name)):# for vn in range(97,98):    print(video_name[vn])    original_video = original_video_route + APPEND_CHAR + video_name[vn] + '.yuv'    original_frame_name = video_name[vn] + '_Im_' + str(error_frame) + '_'    video_number = vn    original_frame = original_video_route + APPEND_CHAR + original_frame_name + '.png'    original_new_name = video_name[vn] + '_' + str(error_frame)    original_new_route = database_route + 'ref_img_' + QP + APPEND_CHAR    if not (os.path.exists(original_new_route)):        os.mkdir(original_new_route);    original_frame_new = original_new_route + original_new_name + '.png'    shutil.copy(original_frame, original_frame_new)    ref_frames.append(original_new_name + '.png')    intact_video_name = 'dec_' + video_name[vn] + '_' + QP + '_intact'    intact_video = intact_route + APPEND_CHAR + video_name[vn] + APPEND_CHAR + codec + APPEND_CHAR + 'decoding' \                   + APPEND_CHAR + QP + APPEND_CHAR + 'Simulation_Results' + APPEND_CHAR \                   + 'Intact' + APPEND_CHAR + intact_video_name + '.yuv'    intact_result_road = intact_route + APPEND_CHAR + video_name[vn] + APPEND_CHAR + codec + APPEND_CHAR + 'decoding' \                   + APPEND_CHAR + QP + APPEND_CHAR + 'Simulation_Results' + APPEND_CHAR + 'Intact'    intact_frame_name = 'dec_' + video_name[vn] + '_' + QP + '_Intact_Im_' + str(error_frame) #+ '_'    intact_frame_road = intact_route + APPEND_CHAR + video_name[vn] + APPEND_CHAR + codec + APPEND_CHAR + 'decoding' \                   + APPEND_CHAR + QP + APPEND_CHAR + 'Simulation_Results' + APPEND_CHAR + 'Intact' + APPEND_CHAR    intact_frame = intact_frame_road + intact_frame_name + '.png'    intact_frame_rgb = intact_frame_road + intact_frame_name + '_.png'    if function == 'train':        intact_new_name = 'i' + str(video_number)        database_route_rgb = database_route + QP + '_rgb' + APPEND_CHAR        if not (os.path.exists(database_route_rgb)):            os.mkdir(database_route_rgb)        intact_frame_new_rgb = database_route_rgb + intact_new_name + '.png'        shutil.copy(intact_frame_rgb, intact_frame_new_rgb)        if error_frame == 1:            intact_psnr_file = intact_frame_road + APPEND_CHAR + 'MetricValues_intra.txt'        else:            intact_psnr_file = intact_frame_road + APPEND_CHAR + 'MetricValues.txt'        with open(intact_psnr_file, "r") as f:            data = f.read()            reg = re.compile('(?<==)\s*\d*\.\d*')            intact_metrics_values = reg.findall(data)        all_frames.append(intact_new_name + '.png')        psnr_error_frame.append(intact_metrics_values[0])        ssim_error_frame.append(intact_metrics_values[1])        ref_id.append(video_number + 1)        std.append(0)        database_route_patch_psnr = database_route + 'patch' + str(            patch_size) + '_psnr_' + QP + '_' + rf_frame + APPEND_CHAR        if not (os.path.exists(database_route_patch_psnr)):            os.mkdir(database_route_patch_psnr)        database_route_patch_psnr_video = database_route_patch_psnr + video_name[vn]  # + '_' + str(error_frame)        if not (os.path.exists(database_route_patch_psnr_video)):            os.mkdir(database_route_patch_psnr_video)        intact_psnr_file = database_route_patch_psnr_video + APPEND_CHAR + 'i' + str(            video_number) + '_PSNR_VALUE_pattern.txt'        with open(intact_psnr_file, "r") as f:            for line in f.readlines():                line = line.strip("\n")                line = line.split("=")                all_patchs.append(line[0] + '.png')                psnr_error_patch.append(line[1])                ref_id.append(video_number + 1)        intact_ssim_file = database_route_patch_psnr_video + APPEND_CHAR + 'i' + str(            video_number) + '_SSIM_VALUE_pattern.txt'        with open(intact_ssim_file, "r") as f:            for line in f.readlines():                line = line.strip("\n")                line = line.split("=")                ssim_error_patch.append(line[1])    else:        intact_new_name = 'i' + str(video_number)        database_route_rgb = database_route + QP + '_rgb_pattern' + APPEND_CHAR + video_name[vn] + '_' \                             + str(error_frame) + APPEND_CHAR        if not (os.path.exists(database_route_rgb)):            os.mkdir(database_route_rgb)        intact_frame_new_rgb = database_route_rgb + intact_new_name + '.png'        shutil.copy(intact_frame_rgb, intact_frame_new_rgb)        if error_frame == 1:            intact_psnr_file = intact_result_road + APPEND_CHAR + 'MetricValues_intra.txt'        else:            intact_psnr_file = intact_result_road + APPEND_CHAR + 'MetricValues.txt'        with open(intact_psnr_file, "r") as f:            data = f.read()            reg = re.compile('(?<==)\s*\d*\.\d*')            intact_metrics_values = reg.findall(data)        intact_psnr_error = intact_metrics_values[0]        psnr_error_frame.append(intact_psnr_error)        intact_ssim_error = intact_metrics_values[1]        ssim_error_frame.append(intact_ssim_error)        all_frames.append(intact_new_name + '.png')        ref_id.append(video_number + 1)        intact_frames.append(intact_new_name + '.png')        intact_psnr_error_frame.append(intact_psnr_error)        intact_ssim_error_frame.append(intact_ssim_error)    for dr in range(0, len(damage_rate)):        candidate_frame_name = video_name[vn] + '_' + QP + '_frame_' + str(error_frame) + '_damaged_' \                               + damage_rate[dr] + '_Im_' + str(error_frame) #+ '_'        candidate_frame = candidate_video_route + APPEND_CHAR + video_name[vn] \                          + APPEND_CHAR + QP + APPEND_CHAR + candidate_frame_name + '_.png'        database_route_psnr_rgb = candidate_video_route + APPEND_CHAR + video_name[vn] + APPEND_CHAR + QP + APPEND_CHAR        if function == 'train':            candidate_new_name = 'c' + str(video_number) + '_' + str(dr)            candidate_frame_new = database_route_rgb + candidate_new_name + '.png'            shutil.copy(candidate_frame, candidate_frame_new)            all_frames.append(candidate_new_name + '.png')            std.append(0)            database_route_patch_psnr = database_route + 'patch' + str(                patch_size) + '_psnr_' + QP + '_' + rf_frame + APPEND_CHAR            database_route_patch_psnr_video = database_route_patch_psnr + video_name[vn]            candidate_psnr_file = database_route_patch_psnr_video + APPEND_CHAR + \                                  'c' + str(video_number) + '_' + str(dr) + '_PSNR_VALUE_pattern.txt'            with open(candidate_psnr_file, "r") as f:                for line in f.readlines():                    line = line.strip("\n")                    line = line.split("=")                    all_patchs.append(line[0] + '.png')                    psnr_error_patch.append(line[1])                    ref_id.append(video_number + 1)            candidate_ssim_file = database_route_patch_psnr_video + APPEND_CHAR \                                  + 'c' + str(video_number) + '_' + str(dr) + '_SSIM_VALUE_pattern.txt'            with open(candidate_ssim_file, "r") as f:                for line in f.readlines():                    line = line.strip("\n")                    line = line.split("=")                    ssim_error_patch.append(line[1])        else:            candidate_new_name = 'c' + str(video_number) + '_' + str(dr)            database_route_rgb = database_route + QP + '_rgb_pattern' + APPEND_CHAR + video_name[vn] + '_' \                                 + str(error_frame) + APPEND_CHAR            candidate_frame_new_rgb = database_route_rgb + candidate_new_name + '.png'            shutil.copy(candidate_frame, candidate_frame_new_rgb)            all_frames.append(candidate_new_name + '.png')            ref_id.append(video_number + 1)    if generate_score:        if function == 'train':            candidate_psnr_file = database_route_psnr_rgb + APPEND_CHAR + \                                  'ErrorFramePSNRValues_RGB.txt'            with open(candidate_psnr_file, "r") as f:                for line in f.readlines():                    line = line.strip("\n")                    line = line.split("=")                    psnr_error_frame.append(line[1])                    ref_id.append(video_number + 1)            candidate_ssim_file = database_route_psnr_rgb + APPEND_CHAR \                                  + 'ErrorFrameSSIMValues_RGB.txt'            with open(candidate_ssim_file, "r") as f:                for line in f.readlines():                    line = line.strip("\n")                    line = line.split("=")                    ssim_error_frame.append(line[1])        else:            candidate_result_road = candidate_video_route + APPEND_CHAR + video_name[vn] + APPEND_CHAR + QP            candidate_psnr_file = candidate_result_road + APPEND_CHAR + 'ErrorFramePSNRValues_RGB.txt'            candidate_ssim_file = candidate_result_road + APPEND_CHAR + 'ErrorFrameSSIMValues_RGB.txt'            with open(candidate_psnr_file, "r") as f:                data = f.read()                reg = re.compile('(?<==)\s*\d*\.\d*')                candidate_psnr = reg.findall(data)                candidate_psnr = np.array(candidate_psnr)                candidate_psnr.tolist()                # print(candidate_psnr)                for i in range(0, len(candidate_psnr)):                    if i == 2 or i == 5 or i == 8:                        psnr_error_frame.append(candidate_psnr[i])            with open(candidate_ssim_file, "r") as f:                data = f.read()                reg = re.compile('(?<==)\s*\d*\.\d*')                candidate_ssim = reg.findall(data)                candidate_ssim = np.array(candidate_ssim)                candidate_ssim.tolist()                # print(candidate_ssim)                for i in range(0, len(candidate_ssim)):                    if i == 2 or i == 5 or i == 8:                        ssim_error_frame.append(candidate_ssim[i])if generate_score:    if function == 'train':        path_df = pd.DataFrame()        path_df['im_names'] = all_patchs        path_df['subjective_scores'] = psnr_error_patch        psnr_error_patch_nz = list()        for i in range(len(psnr_error_patch)):            score_nz = (float(psnr_error_patch[i]) - 10) / (50-10)            if score_nz < 0:                psnr_error_patch_nz.append(0.0)            else:                psnr_error_patch_nz.append(score_nz)        path_df['subjective_scores_nz'] = psnr_error_patch_nz        path_txt = pd.DataFrame()        path_txt['im_names'] = all_patchs        path_txt['subjective_scores_nz'] = psnr_error_patch_nz        if error_frame == 1:            path_df.to_excel(database_route + 'fr_scores_patch' + str(patch_size) + '_psnr_intra_'                             + QP + '_' + rf_frame + '.xlsx', index=False,                             header=True)            path_txt.to_csv(database_route + '1024pdata_intra_'+ rf_frame +'.txt', sep=' ', index=0, header=0)        else:            path_df.to_excel(database_route + 'fr_scores_patch' + str(patch_size) + '_psnr_inter_'                             + QP + '_' + rf_frame + '.xlsx', index=False,                             header=True)            path_txt.to_csv(database_route + '1024pdata_inter_' + rf_frame + '.txt', sep=' ', index=0, header=0)        path_df_ssim = pd.DataFrame()        path_df_ssim['im_names'] = all_patchs        path_df_ssim['subjective_scores'] = ssim_error_patch        if error_frame == 1:            path_df_ssim.to_excel(database_route + 'fr_scores_patch' + str(patch_size) + '_ssim_intra_'                                  + QP + '_' + rf_frame + '.xlsx',                                  index=False, header=True)        else:            path_df_ssim.to_excel(database_route + 'fr_scores_patch' + str(patch_size) + '_ssim_inter_'                                  + QP + '_' + rf_frame + '.xlsx',                                  index=False, header=True)        path_df = pd.DataFrame()        path_df['im_names'] = all_frames        path_df['subjective_scores'] = psnr_error_frame        path_df['subjective_scoresSTD'] = std        if error_frame == 1:            path_df.to_csv(database_route + 'fr_scores_psnr_' + QP + '_train_intra_rgb.csv', index=False,                           header=True)        else:            path_df.to_csv(database_route + 'fr_scores_psnr_' + QP + '_train_inter_rgb.csv', index=False,                           header=True)        path_df_ssim = pd.DataFrame()        path_df_ssim['im_names'] = all_frames        path_df_ssim['subjective_scores'] = ssim_error_frame        path_df_ssim['subjective_scoresSTD'] = std        if error_frame == 1:            path_df_ssim.to_csv(database_route + 'fr_scores_ssim_' + QP + '_train_intra_rgb.csv',                                index=False, header=True)        else:            path_df_ssim.to_csv(database_route + 'fr_scores_ssim_' + QP + '_train_inter_rgb.csv',                                index=False, header=True)    elif function == 'test':            path_df = pd.DataFrame()            path_df['im_names'] = all_frames            path_df['subjective_scores'] = psnr_error_frame            if error_frame == 1:                path_df.to_csv(                    database_route + 'fr_scores_psnr_' + QP + '_test_intra_rgb.csv', index=False, header=True)            else:                path_df.to_csv(                    database_route + 'fr_scores_psnr_' + QP + '_test_inter_rgb.csv', index=False, header=True)            path_df_ssim = pd.DataFrame()            path_df_ssim['im_names'] = all_frames            print(len(all_frames))            print(len(ssim_error_frame))            path_df_ssim['subjective_scores'] = ssim_error_frame            if error_frame == 1:                path_df_ssim.to_csv(                    database_route + 'fr_scores_ssim_' + QP + '_test_intra_rgb.csv', index=False, header=True)            else:                path_df_ssim.to_csv(                    database_route + 'fr_scores_ssim_' + QP + '_test_inter_rgb.csv', index=False, header=True)# intact_psnr_error_frame = [float(x) for x in intact_psnr_error_frame]# print(np.mean(intact_psnr_error_frame))# # print(np.sum(intact_psnr_error_frame))## intact_ssim_error_frame = [float(x) for x in intact_ssim_error_frame]# print(np.mean(intact_ssim_error_frame))# # print(np.sum(intact_ssim_error_frame))